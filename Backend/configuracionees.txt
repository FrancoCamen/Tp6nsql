Ejecutar la Carga Manual: Para cargar los datos manualmente desde el contenedor de Django: docker-compose exec backend python manage.py load_airport_data /app/airports.json

export RUN_INITIAL_LOAD=true


# Carga datos JSON
    try:
        with open(json_file_path, 'r') as file:
            data = json.load(file)
    except FileNotFoundError:
        print(f"Error: No se encontr칩 {json_file_path}")
        return
    except json.JSONDecodeError:
        print(f"Error: Formato JSON inv치lido en {json_file_path}")
        return

    # Contador para los aeropuertos cargados
    loaded_airports = 0

    for airport in data:
        # Obtiene iata_faa e icao, si existen
        iata_faa = airport.get('iata_faa')
        icao = airport.get('icao')

        # Si no tiene ni iata_faa ni icao, salta este aeropuerto
        if not iata_faa and not icao:
            continue

        # Inserta en MongoDB (colecci칩n airports) con todos los atributos
        mongo_db.airports.insert_one({
            'name': airport.get('name'),
            'city': airport.get('city'),
            'iata_faa': iata_faa,
            'icao': icao,
            'lat': airport.get('lat'),
            'lng': airport.get('lng'),
            'alt': airport.get('alt'),
            'tz': airport.get('tz')
        })

        # Usa iata_faa como identificador en Redis GEO si est치 presente, de lo contrario usa icao
        identifier = iata_faa if iata_faa else icao

        # Agrega a Redis GEO con GEOADD (usando lng, lat, y el identificador)
        redis_geo.geoadd(
            'airports_geo',
            (airport.get('lng'), airport.get('lat'), identifier)
        )

        loaded_airports += 1